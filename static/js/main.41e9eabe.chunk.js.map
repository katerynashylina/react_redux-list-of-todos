{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","types/Filter.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","initialState","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","length","className","map","id","title","completed","classNames","onClick","currentTodoActions","handleSelectTodo","TodoFilter","onSubmit","event","preventDefault","onChange","filterTodoActions","target","value","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Filter","Loader","TodoModal","useState","user","setUser","userId","useEffect","getUser","foundUser","href","email","name","App","isLoading","setIsLoading","visibleTodoItems","formattedQuery","trim","toLowerCase","Active","includes","Completed","visibleTodos","todoItems","todosActions","finally","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.41e9eabe.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","type SetQueryAction = {\n  type: 'filter/SET_QUERY';\n  payload: string;\n};\n\ntype SetStatusAction = {\n  type: 'filter/SET_STATUS';\n  payload: string;\n};\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\nconst setStatus = (status: string): SetStatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\nexport const actions = {\n  setQuery,\n  setStatus,\n};\n\nconst initialState = {\n  query: '',\n  status: 'all',\n};\n\ntype Actions = SetQueryAction | SetStatusAction;\n\nconst filterReducer = (state = initialState, action: Actions) => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n    case 'filter/SET_STATUS':\n      return {\n        ...state,\n        status: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodos = { type: 'todos/SET', payload: Todo[] };\n\nconst set = (todos: Todo[]): SetTodos => (\n  { type: 'todos/SET', payload: todos });\n\nexport const actions = { set };\n\nconst todosReducer = (todos: Todo[] = [], action: SetTodos): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const handleSelectTodo = (todo: Todo) => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  const handleDeselectTodo = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  return (\n    <>\n      {!todos.length ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {todos.map(todo => {\n              const { id, title, completed } = todo;\n\n              return (\n                <tr data-cy=\"todo\">\n                  <td className=\"is-vcentered\">{id}</td>\n                  <td className=\"is-vcentered\">\n                    {completed && (\n                      <span className=\"icon\" data-cy=\"iconCompleted\">\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    )}\n                  </td>\n\n                  <td className=\"is-vcentered is-expanded\">\n                    <p className={classNames(\n                      completed ? 'has-text-success' : 'has-text-danger',\n                    )}\n                    >\n                      {title}\n                    </p>\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => (\n                        currentTodo?.id === id\n                          ? handleDeselectTodo()\n                          : handleSelectTodo(todo)\n                      )}\n                    >\n                      <span className=\"icon\">\n                        <i className={classNames(\n                          'far',\n                          (currentTodo?.id === id\n                            ? 'fa-eye-slash'\n                            : 'fa-eye'\n                          ),\n                        )}\n                        />\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterTodoActions } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const { query } = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterTodoActions.setQuery(event.target.value));\n  };\n\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filterTodoActions.setStatus(event.target.value));\n  };\n\n  const handleInputClear = () => {\n    dispatch(filterTodoActions.setQuery(''));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleSelectChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleInputChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query && (\n            // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              aria-label=\"delete-button\"\n              onClick={handleInputClear}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum Filter {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState, useEffect } from 'react';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const [user, setUser] = useState<User | null>(null);\n  const {\n    id, title, completed, userId = 0,\n  } = currentTodo || {};\n\n  useEffect(() => {\n    getUser(userId).then(foundUser => setUser(foundUser));\n  }, []);\n\n  const handleClickClose = () => dispatch(currentTodoActions.removeTodo());\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              aria-label=\"modal-button\"\n              onClick={handleClickClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { Filter } from './types/Filter';\nimport { TodoModal } from './components/TodoModal';\n\nconst visibleTodos = (query: string, todos: Todo[], status: string) => {\n  const formattedQuery = query.trim().toLowerCase();\n\n  switch (status) {\n    case Filter.Active:\n      return todos.filter(\n        todo => !todo.completed && todo.title.toLowerCase().includes(formattedQuery),\n      );\n    case Filter.Completed:\n      return todos.filter(\n        todo => todo.completed && todo.title.toLowerCase().includes(formattedQuery),\n      );\n    default:\n      return todos.filter(\n        todo => todo.title.toLowerCase().includes(formattedQuery),\n      );\n  }\n};\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const { query, status } = useAppSelector(state => state.filter);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const visibleTodoItems = visibleTodos(query, todos, status);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos()\n      .then((todoItems) => {\n        dispatch(todosActions.set(todoItems));\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [dispatch]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (<Loader />) : (\n                <TodoList\n                  todos={visibleTodoItems}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}